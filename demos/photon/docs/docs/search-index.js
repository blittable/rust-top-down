var N=null,E="",T="t",U="u",searchIndex={};
var R=["jsvalue","htmlcanvaselement","canvasrenderingcontext2d","photonimage","imagedata","usize","photon","monochrome","Convert an image to grayscale by setting a pixel's 3 RGB…","open_image","dynamicimage","result","try_from","try_into","borrow_mut","return_abi","adapt_into_using","value_into","approx_into","approx_from","value_from","formatter","from_abi","ref_from_abi","describe","into_abi","ref_mut_from_abi","PhotonImage"];

searchIndex["bin"]={"doc":E,"i":[],"p":[]};
searchIndex["photon"]={"doc":"An image processing crate that provides a set of functions…","i":[[3,R[27],R[6],"Provides the image's height, width, and contains the…",N,N],[3,"Rgb",E,"RGB color type.",N,N],[12,"r",E,E,0,N],[12,"g",E,E,0,N],[12,"b",E,E,0,N],[5,"run",E,"[temp] Called by the JS entry point to ensure WASM is…",N,[[],[[R[0]],[R[11],[R[0]]]]]],[5,"get_image_data",E,"Get the ImageData from a 2D canvas context",N,[[[R[2]],[R[1]]],[R[4]]]],[5,"putImageData",E,"Place a PhotonImage onto a 2D canvas.",N,[[[R[1]],[R[2]],[R[3]]]]],[5,R[9],E,"Convert a HTML5 Canvas Element to a PhotonImage.",N,[[[R[1]],[R[2]]],[R[3]]]],[5,"to_raw_pixels",E,"Convert ImageData to a raw pixel vec of u8s.",N,[[[R[4]]],[["vec",["u8"]],["u8"]]]],[5,"to_image_data",E,"Convert a PhotonImage to JS-compatible ImageData.",N,[[[R[3]]],[R[4]]]],[5,"test",E,E,N,[[["u32"]],["u32"]]],[0,"channels",E,"Channel manipulation.",N,N],[5,"alter_channel","photon::channels","Alter a select channel by incrementing or decrementing its…",N,[[[R[3]],[R[5]],["i16"]]]],[5,"alter_red_channel",E,"Increment or decrement every pixel's Red channel by a…",N,[[[R[3]],["i16"]]]],[5,"alter_green_channel",E,"Increment or decrement every pixel's Green channel by a…",N,[[[R[3]],["i16"]]]],[5,"alter_blue_channel",E,"Increment or decrement every pixel's Blue channel by a…",N,[[[R[3]],["i16"]]]],[5,"alter_two_channels",E,"Increment/decrement two channels' values simultaneously by…",N,[[[R[3]],[R[5]],["i16"]]]],[5,"alter_channels",E,"Increment all 3 channels' values by adding an amt to each…",N,[[[R[3]],["i16"]]]],[5,"remove_channel",E,"Set a certain channel to zero, thus removing the channel's…",N,[[[R[3]],[R[5]],["u8"]]]],[5,"remove_red_channel",E,"Remove the Red channel's influence in an image.",N,[[[R[3]],["u8"]]]],[5,"remove_green_channel",E,"Remove the Green channel's influence in an image.",N,[[[R[3]],["u8"]]]],[5,"remove_blue_channel",E,"Remove the Blue channel's influence in an image.",N,[[[R[3]],["u8"]]]],[5,"swap_channels",E,"Swap two channels.",N,[[[R[3]],[R[5]]]]],[5,"selective_hue_rotate",E,"Selective hue rotation.",N,[[["rgb"],[R[3]],["f32"]]]],[5,"color_sim",E,"Get the similarity of two colours in the lab colour space…",N,[[["lab"]],["i64"]]],[5,"selective_lighten",E,"Selectively lighten an image.",N,[[["rgb"],[R[3]],["f32"]]]],[5,"selective_desaturate",E,"Selectively desaturate pixel colours which are similar to…",N,[[["rgb"],[R[3]],["f32"]]]],[5,"selective_saturate",E,"Selectively saturate pixel colours which are similar to…",N,[[["rgb"],[R[3]],["f32"]]]],[5,"selective_greyscale",E,"Selectively changes a pixel to greyscale if it is not…",N,[[["rgb"],[R[3]]]]],[0,"effects",R[6],"Special effects.",N,N],[5,"offset","photon::effects","Adds an offset to the image by a certain number of pixels. ",N,[[[R[3]],[R[5]],["u32"]]]],[5,"offset_red",E,"Adds an offset to the red channel by a certain number of…",N,[[[R[3]],["u32"]]]],[5,"offset_green",E,"Adds an offset to the green channel by a certain number of…",N,[[[R[3]],["u32"]]]],[5,"offset_blue",E,"Adds an offset to the blue channel by a certain number of…",N,[[[R[3]],["u32"]]]],[5,"multiple_offsets",E,"Adds multiple offsets to the image by a certain number of…",N,[[[R[3]],["u32"],[R[5]]]]],[5,"create_gradient_map",E,"Create a gradient map between two RGB colours.",N,[[["rgb"]],[["rgb"],["vec",["rgb"]]]]],[5,"duotone",E,"Pass the image through a duotone filter (comprising two…",N,[[["rgb"],[R[3]]]]],[5,"halftone",E,"Halftoning effect.",N,[[[R[3]]]]],[5,"primary",E,"Reduces an image to the primary colours.",N,[[[R[3]]]]],[5,"colorize",E,"Colorizes the green channels of the image.",N,[[[R[3]]]]],[5,"solarize",E,"Applies a solarizing effect to an image.",N,[[[R[3]]]]],[5,"inc_brightness",E,"Increase the brightness of an image by a factor.",N,[[[R[3]],["u8"]]]],[5,"tint",E,"Tint an image by adding an offset to averaged RGB channel…",N,[[[R[3]],["u32"]]]],[0,"conv",R[6],"Convolution effects such as sharpening, blurs, sobel…",N,N],[5,"noise_reduction","photon::conv","Noise reduction. ",N,[[[R[3]]]]],[5,"sharpen",E,"Sharpen an image. ",N,[[[R[3]]]]],[5,"edge_detection",E,"Apply edge detection to an image, to create a dark version…",N,[[[R[3]]]]],[5,"identity",E,"Apply an identity kernel convolution to an image.",N,[[[R[3]]]]],[5,"box_blur",E,"Apply a box blur effect.",N,[[[R[3]]]]],[5,"gaussian_blur",E,"Apply a gaussian blur effect.",N,[[[R[3]]]]],[5,"detect_horizontal_lines",E,"Detect horizontal lines in an image, and highlight these…",N,[[[R[3]]]]],[5,"detect_vertical_lines",E,"Detect vertical lines in an image, and highlight these only.",N,[[[R[3]]]]],[5,"detect_45_deg_lines",E,"Detect lines at a forty five degree angle in an image, and…",N,[[[R[3]]]]],[5,"detect_135_deg_lines",E,"Detect lines at a 135 degree angle in an image, and…",N,[[[R[3]]]]],[5,"laplace",E,"Apply a standard laplace convolution.",N,[[[R[3]]]]],[5,"edge_one",E,"Preset edge effect.",N,[[[R[3]]]]],[5,"emboss",E,"Apply an emboss effect to an image.",N,[[[R[3]]]]],[5,"sobel_horizontal",E,"Apply a horizontal Sobel filter to an image.",N,[[[R[3]]]]],[5,"prewitt_horizontal",E,"Apply a horizontal Prewitt convolution to an image.",N,[[[R[3]]]]],[5,"sobel_vertical",E,"Apply a vertical Sobel filter to an image.",N,[[[R[3]]]]],[0,"filters",R[6],"Preset color filters.",N,N],[5,"neue","photon::filters","Solarization on the Blue channel.",N,[[[R[3]]]]],[5,"lix",E,"Solarization on the Red and Green channels.",N,[[[R[3]]]]],[5,"ryo",E,"Solarization on the Red and Blue channels.",N,[[[R[3]]]]],[5,"filter",E,"Apply a filter to an image. Over 20 filters are available.…",N,[[[R[3]],["str"]]]],[0,R[7],R[6],"Monochrome-related effects and greyscaling/duotoning.",N,N],[5,R[7],"photon::monochrome","Apply a monochrome effect of a certain colour.",N,[[[R[3]],["u32"]]]],[5,"sepia",E,"Convert an image to sepia.",N,[[[R[3]]]]],[5,"grayscale",E,"Convert an image to grayscale using the conventional…",N,[[[R[3]]]]],[5,"grayscale_human_corrected",E,"Convert an image to grayscale with a human corrected…",N,[[[R[3]]]]],[5,"desaturate",E,"Desaturate an image by getting the min/max of each pixel's…",N,[[[R[3]]]]],[5,"decompose_min",E,"Uses a min. decomposition algorithm to convert an image to…",N,[[[R[3]]]]],[5,"decompose_max",E,"Uses a max. decomposition algorithm to convert an image to…",N,[[[R[3]]]]],[5,"grayscale_shades",E,"Employ only a limited number of gray shades in an image.",N,[[[R[3]],["u8"]]]],[5,"r_grayscale",E,R[8],N,[[[R[3]]]]],[5,"g_grayscale",E,R[8],N,[[[R[3]]]]],[5,"b_grayscale",E,R[8],N,[[[R[3]]]]],[5,"single_channel_grayscale",E,R[8],N,[[[R[3]],[R[5]]]]],[5,"threshold",E,"Threshold an image using a standard thresholding algorithm.",N,[[[R[3]],["u32"]]]],[0,"native",R[6],"Native-only functions. Includes functions that open images…",N,N],[5,R[9],"photon::native","Open an image at a given path from the filesystem. A…",N,[[["str"]],[R[3]]]],[5,"save_image",E,"Save the image to the filesystem at a given path. #…",N,[[[R[3]],["str"]]]],[0,"text",R[6],"Draw text to an image. For extended graphic…",N,N],[5,"draw_text_with_border","photon::text","Add bordered-text to an image. The only font available as…",N,[[[R[3]],["u32"],["str"]]]],[5,"draw_text",E,"Add text to an image. The only font available as of now is…",N,[[[R[3]],["u32"],["str"]]]],[0,"colour_spaces",R[6],"Image manipulation effects in HSL, LCh and HSV.",N,N],[5,"lch","photon::colour_spaces","Image manipulation effects in the LCh colour space",N,[[["f32"],[R[3]],["str"]]]],[5,"hsl",E,"Image manipulation effects in the HSL colour space.",N,[[["f32"],[R[3]],["str"]]]],[5,"hsv",E,"Image manipulation in the HSV colour space. ",N,[[["f32"],[R[3]],["str"]]]],[5,"hue_rotate_hsl",E,"Shift hue by a specified number of degrees in the HSL…",N,[[["f32"],[R[3]]]]],[5,"hue_rotate_hsv",E,"Shift hue by a specified number of degrees in the HSV…",N,[[["f32"],[R[3]]]]],[5,"hue_rotate_lch",E,"Shift hue by a specified number of degrees in the LCh…",N,[[["f32"],[R[3]]]]],[5,"saturate_hsl",E,"Increase the image's saturation by converting each pixel's…",N,[[["f32"],[R[3]]]]],[5,"saturate_lch",E,"Increase the image's saturation in the LCh colour space. #…",N,[[["f32"],[R[3]]]]],[5,"saturate_hsv",E,"Increase the image's saturation in the HSV colour space. #…",N,[[["f32"],[R[3]]]]],[5,"lighten_lch",E,"Lighten an image by a specified amount in the LCh colour…",N,[[["f32"],[R[3]]]]],[5,"lighten_hsl",E,"Lighten an image by a specified amount in the HSL colour…",N,[[["f32"],[R[3]]]]],[5,"lighten_hsv",E,"Lighten an image by a specified amount in the HSV colour…",N,[[["f32"],[R[3]]]]],[5,"darken_lch",E,"Darken the image by a specified amount in the LCh colour…",N,[[["f32"],[R[3]]]]],[5,"darken_hsl",E,"Darken the image by a specified amount in the HSL colour…",N,[[["f32"],[R[3]]]]],[5,"darken_hsv",E,"Darken the image's colours by a specified amount in the…",N,[[["f32"],[R[3]]]]],[5,"desaturate_hsv",E,"Desaturate the image by a specified amount in the HSV…",N,[[["f32"],[R[3]]]]],[5,"desaturate_hsl",E,"Desaturate the image by a specified amount in the HSL…",N,[[["f32"],[R[3]]]]],[5,"desaturate_lch",E,"Desaturate the image by a specified amount in the LCh…",N,[[["f32"],[R[3]]]]],[0,"multiple",R[6],"Image manipulation with multiple images, including adding…",N,N],[5,"watermark","photon::multiple","Add a watermark to an image.",N,[[[R[3]],[R[3]],["u32"]]]],[5,"blend",E,"Blend two images together. The `blend_mode` (3rd param)…",N,[[[R[3]],[R[3]],["str"]]]],[5,"replace_background",E,"Change the background of an image (using a green…",N,[[[R[3]],[R[3]],["rgb"]]]],[0,"noise",R[6],"Add noise to images.",N,N],[5,"add_noise_rand","photon::noise","Add randomized noise to an image. This function adds a…",N,[[[R[3]]],[R[3]]]],[5,"pink_noise",E,"Add pink-tinted noise to an image. ",N,[[[R[3]]]]],[0,"helpers",R[6],"Helper functions for converting between various formats",N,N],[5,"square_distance","photon::helpers","Gets the square distance between two colours",N,[[["rgb"]],["i32"]]],[5,"open_dyn_image",E,E,N,[[["str"]],[R[10]]]],[5,"save_dyn_image",E,"Save a DynamicImage to a path. ",N,[[["str"],[R[10]]]]],[5,"get_pixels",E,"Get raw pixels (as a vec of u8s) from a DynamicImage",N,[[[R[10]]],[["vec",["u8"]],["u8"]]]],[5,"dyn_image_from_raw",E,"Convert a PhotonImage to a DynamicImage type (struct used…",N,[[[R[3]]],[R[10]]]],[5,"base64_to_image",E,"Convert a base64 str to a Vec of u8s representing an…",N,[[["str"]],[["vec",["u8"]],["u8"]]]],[11,"new_from_imgdata",R[6],E,1,[[["self"],["u32"],[R[4]]],[R[3]]]],[11,"new",E,E,1,[[["self"],["u32"]],[R[3]]]],[11,"new",E,E,0,[[["u8"]],["rgb"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[12],E,E,1,[[[U]],[R[11]]]],[11,R[13],E,E,1,[[],[R[11]]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,"type_id",E,E,1,[[["self"]],["typeid"]]],[11,R[15],E,E,1,[[["stack"]]]],[11,R[16],E,E,1,[[["m"]],["d"]]],[11,R[17],E,E,1,[[],[R[11]]]],[11,R[18],E,E,1,[[],[R[11]]]],[11,R[19],E,E,1,[[["src"]],[R[11]]]],[11,R[20],E,E,1,[[["src"]],[R[11]]]],[11,R[12],E,E,1,[[["src"]],[R[11]]]],[11,R[13],E,E,1,[[],[R[11]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[12],E,E,0,[[[U]],[R[11]]]],[11,R[13],E,E,0,[[],[R[11]]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,"type_id",E,E,0,[[["self"]],["typeid"]]],[11,R[15],E,E,0,[[["stack"]]]],[11,R[16],E,E,0,[[["m"]],["d"]]],[11,R[17],E,E,0,[[],[R[11]]]],[11,R[18],E,E,0,[[],[R[11]]]],[11,R[19],E,E,0,[[["src"]],[R[11]]]],[11,R[20],E,E,0,[[["src"]],[R[11]]]],[11,R[12],E,E,0,[[["src"]],[R[11]]]],[11,R[13],E,E,0,[[],[R[11]]]],[11,"fmt",E,E,1,[[["self"],[R[21]]],[R[11]]]],[11,"fmt",E,E,0,[[["self"],[R[21]]],[R[11]]]],[11,R[22],E,E,1,[[["stack"],["u32"]],["self"]]],[11,R[22],E,E,0,[[["stack"],["u32"]],["self"]]],[11,R[23],E,E,1,[[["stack"]]]],[11,R[23],E,E,0,[[["stack"]]]],[11,R[24],E,E,1,[[]]],[11,R[24],E,E,0,[[]]],[11,R[25],E,E,1,[[["stack"]],["u32"]]],[11,R[25],E,E,0,[[["stack"]],["u32"]]],[11,"is_none",E,E,1,[[],["bool"]]],[11,"is_none",E,E,0,[[],["bool"]]],[11,"none",E,E,1,[[]]],[11,"none",E,E,0,[[]]],[11,R[26],E,E,1,[[["stack"]]]],[11,R[26],E,E,0,[[["stack"]]]]],"p":[[3,"Rgb"],[3,R[27]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);