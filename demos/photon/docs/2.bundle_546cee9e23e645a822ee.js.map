{"version":3,"sources":["webpack:///../crate/pkg/photon.js"],"names":["passStringToWasm","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","cachegetUint8Memory","getUint8Memory","buffer","wasm","Uint8Array","draw_text_with_border","photon_img","text","x","y","ptr1","len1","ptr","draw_text","watermark","img","blend","photon_image","photon_image2","blend_mode","ptr2","len2","create_gradient","width","height","PhotonImage","__wrap","apply_gradient","image","lch","mode","amt","hsl","hsv","hue_rotate_hsl","degrees","hue_rotate_hsv","hue_rotate_lch","saturate_hsl","level","saturate_lch","saturate_hsv","lighten_lch","lighten_hsl","lighten_hsv","darken_lch","darken_hsl","darken_hsv","desaturate_hsv","desaturate_hsl","desaturate_lch","noise_reduction","sharpen","edge_detection","identity","box_blur","gaussian_blur","detect_horizontal_lines","detect_vertical_lines","detect_45_deg_lines","detect_135_deg_lines","laplace","edge_one","emboss","sobel_horizontal","prewitt_horizontal","sobel_vertical","encodeInto","arg","size","length","offset","mem","code","charCodeAt","slice","view","subarray","written","buf","encode","set","heap","Array","fill","undefined","push","heap_next","addHeapObject","obj","idx","run","stack_pointer","addBorrowedObject","Error","getObject","dropObject","takeObject","ret","get_image_data","canvas","ctx","putImageData","new_image","open_image","getArrayU8FromWasm","len","cachedGlobalArgumentPtr","globalArgumentPtr","cachegetUint32Memory","getUint32Memory","Uint32Array","to_raw_pixels","imgdata","retptr","rustptr","rustlen","realRet","base64_to_image","base64","ptr0","len0","base64_to_vec","passArray8ToWasm","photonimage_from_vec","vec","to_image_data","test","a","b","channel_index","offset_red","offset_amt","offset_green","offset_blue","multiple_offsets","channel_index2","duotone","color_a","color_b","primary","colorize","solarize","inc_brightness","brightness","tint","r_offset","g_offset","b_offset","horizontal_strips","num_strips","vertical_strips","alter_channel","channel","alter_red_channel","alter_green_channel","alter_blue_channel","alter_two_channels","channel1","amt1","channel2","amt2","alter_channels","r_amt","g_amt","b_amt","remove_channel","min_filter","remove_red_channel","remove_green_channel","remove_blue_channel","swap_channels","selective_hue_rotate","ref_color","selective_lighten","selective_desaturate","selective_saturate","selective_greyscale","monochrome","sepia","grayscale","grayscale_human_corrected","desaturate","decompose_min","decompose_max","grayscale_shades","num_shades","r_grayscale","g_grayscale","b_grayscale","single_channel_grayscale","threshold","neue","lix","ryo","filter","filter_name","cachedTextDecoder","TextDecoder","getStringFromWasm","decode","__wbg_error_4bb6c2a97407129a","arg0","arg1","varg0","console","error","__wbg_new_59cb74e423758ede","__wbg_stack_558ba5917b466edd","stack","retlen","handleError","exnptr","e","__widl_f_get_image_data_CanvasRenderingContext2D","arg2","arg3","arg4","getImageData","__widl_f_put_image_data_CanvasRenderingContext2D","__widl_f_create_element_Document","varg1","createElement","isLikeNone","__widl_f_body_Document","val","body","__widl_f_width_HTMLCanvasElement","__widl_f_height_HTMLCanvasElement","cachegetUint8ClampedMemory","getClampedArrayU8FromWasm","Uint8ClampedArray","__widl_f_new_with_u8_clamped_array_and_sh_ImageData","ImageData","__widl_f_data_ImageData","data","__widl_f_append_child_Node","appendChild","__widl_f_set_text_content_Node","textContent","__widl_instanceof_Window","Window","__widl_f_document_Window","document","__wbg_newnoargs_a172f39151049128","Function","__wbg_call_8a9c8b0a32a202ff","call","__wbindgen_debug_string","i","len_ptr","toString","Object","prototype","debug","debug_str","type","_typeof","concat","description","name","isArray","className","builtInMatches","exec","JSON","stringify","_","message","__wbindgen_rethrow","__wbindgen_throw","_classCallCheck","this","_createClass","key","value","freePhotonImage","img_data","create","Rgb","freeRgb","get","r","g","__wbindgen_object_clone_ref","__wbindgen_object_drop_ref"],"mappings":"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","file":"2.bundle_546cee9e23e645a822ee.js","sourcesContent":["import * as wasm from './photon_bg';\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            arg = arg.slice(offset);\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + arg.length * 3);\n            const view = getUint8Memory().subarray(ptr + offset, ptr + size);\n            const ret = cachedTextEncoder.encodeInto(arg, view);\n\n            offset += ret.written;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            const buf = cachedTextEncoder.encode(arg.slice(offset));\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + buf.length);\n            getUint8Memory().set(buf, ptr + offset);\n            offset += buf.length;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n}\n/**\n* Add bordered-text to an image.\n* The only font available as of now is Roboto.\n* Note: A graphic design/text-drawing library is currently being developed, so stay tuned.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `text` - Text string to be drawn to the image.\n* * `x` - x-coordinate of where first letter\\'s 1st pixel should be drawn.\n* * `y` - y-coordinate of where first letter\\'s 1st pixel should be drawn.\n*\n* # Example\n* ```\n* // For example to draw the string \\\"Welcome to Photon!\\\" at 10, 10:\n* use photon::text::draw_text_with_border;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/cats.PNG\\\");\n*\n* draw_text_with_border(&mut img, \\\"Welcome to Photon!\\\", 10, 10);\n* ```\n* @param {PhotonImage} photon_img\n* @param {string} text\n* @param {number} x\n* @param {number} y\n* @returns {void}\n*/\nexport function draw_text_with_border(photon_img, text, x, y) {\n    const ptr1 = passStringToWasm(text);\n    const len1 = WASM_VECTOR_LEN;\n    try {\n        return wasm.draw_text_with_border(photon_img.ptr, ptr1, len1, x, y);\n\n    } finally {\n        wasm.__wbindgen_free(ptr1, len1 * 1);\n\n    }\n\n}\n\n/**\n* Add text to an image.\n* The only font available as of now is Roboto.\n* Note: A graphic design/text-drawing library is currently being developed, so stay tuned.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `text` - Text string to be drawn to the image.\n* * `x` - x-coordinate of where first letter\\'s 1st pixel should be drawn.\n* * `y` - y-coordinate of where first letter\\'s 1st pixel should be drawn.\n*\n* # Example\n* ```\n* // For example to draw the string \\\"Welcome to Photon!\\\" at 10, 10:\n* use photon::text::draw_text;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/cats.PNG\\\");\n*\n* draw_text(&mut img, \\\"Welcome to Photon!\\\", 10, 10);\n* ```\n* @param {PhotonImage} photon_img\n* @param {string} text\n* @param {number} x\n* @param {number} y\n* @returns {void}\n*/\nexport function draw_text(photon_img, text, x, y) {\n    const ptr1 = passStringToWasm(text);\n    const len1 = WASM_VECTOR_LEN;\n    try {\n        return wasm.draw_text(photon_img.ptr, ptr1, len1, x, y);\n\n    } finally {\n        wasm.__wbindgen_free(ptr1, len1 * 1);\n\n    }\n\n}\n\n/**\n* Add a watermark to an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n* * `watermark` - The watermark to be placed onto the `img` image.\n* * `x` - The x coordinate where the watermark\\'s top corner should be positioned.\n* * `y` - The y coordinate where the watermark\\'s top corner should be positioned.\n* # Example\n*\n* ```\n* // For example, to add a watermark to an image at x: 30, y: 40:\n* use photon::multiple;\n* photon::multiple::watermark(img, watermark, 30, 40);\n* ```\n* @param {PhotonImage} img\n* @param {PhotonImage} watermark\n* @param {number} x\n* @param {number} y\n* @returns {void}\n*/\nexport function watermark(img, watermark, x, y) {\n    const ptr1 = watermark.ptr;\n    watermark.ptr = 0;\n    return wasm.watermark(img.ptr, ptr1, x, y);\n}\n\n/**\n* Blend two images together.\n* The `blend_mode` (3rd param) determines which blending mode to use; change this for varying effects.\n* The blend modes available include: `overlay`, `over`, `atop`, `xor`, `multiply`, `burn`, `soft_light`, `hard_light`\n* `difference`, `lighten`, `darken`, `dodge`, `plus`, `exclusion` (more to come)\n* NOTE: The first image must be smaller than the second image passed as params.\n* If the first image were larger than the second, then there would be overflowing pixels which would have no corresponding pixels\n* in the second image.\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n* * `img2` - The 2nd DynamicImage to be blended with the first.\n* * `blend_mode` - The blending mode to use. See above for complete list of blend modes available.\n* # Example\n*\n* ```\n* // For example, to add a watermark to an image at x: 30, y: 40:\n* use photon::multiple;\n* photon::multiple::watermark(img, watermark, 30, 40);\n* ```\n* @param {PhotonImage} photon_image\n* @param {PhotonImage} photon_image2\n* @param {string} blend_mode\n* @returns {void}\n*/\nexport function blend(photon_image, photon_image2, blend_mode) {\n    const ptr2 = passStringToWasm(blend_mode);\n    const len2 = WASM_VECTOR_LEN;\n    try {\n        return wasm.blend(photon_image.ptr, photon_image2.ptr, ptr2, len2);\n\n    } finally {\n        wasm.__wbindgen_free(ptr2, len2 * 1);\n\n    }\n\n}\n\n/**\n* @param {number} width\n* @param {number} height\n* @returns {PhotonImage}\n*/\nexport function create_gradient(width, height) {\n    return PhotonImage.__wrap(wasm.create_gradient(width, height));\n}\n\n/**\n* Apply a gradient to an image.\n* @param {PhotonImage} image\n* @returns {void}\n*/\nexport function apply_gradient(image) {\n    return wasm.apply_gradient(image.ptr);\n}\n\n/**\n* Image manipulation effects in the LCh colour space\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n* # Example\n* ```\n* // For example to increase the saturation by 10%:\n* use photon::color_spaces::lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* lch(&mut img, \\\"saturate\\\", 0.1);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n* @returns {void}\n*/\nexport function lch(photon_image, mode, amt) {\n    const ptr1 = passStringToWasm(mode);\n    const len1 = WASM_VECTOR_LEN;\n    try {\n        return wasm.lch(photon_image.ptr, ptr1, len1, amt);\n\n    } finally {\n        wasm.__wbindgen_free(ptr1, len1 * 1);\n\n    }\n\n}\n\n/**\n* Image manipulation effects in the HSL colour space.\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n* # Example\n* ```\n* // For example to increase the saturation by 10%:\n* use photon::color_spaces::hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* hsl(&mut img, \\\"saturate\\\", 0.1);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n* @returns {void}\n*/\nexport function hsl(photon_image, mode, amt) {\n    const ptr1 = passStringToWasm(mode);\n    const len1 = WASM_VECTOR_LEN;\n    try {\n        return wasm.hsl(photon_image.ptr, ptr1, len1, amt);\n\n    } finally {\n        wasm.__wbindgen_free(ptr1, len1 * 1);\n\n    }\n\n}\n\n/**\n* Image manipulation in the HSV colour space.\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n*\n* # Example\n* ```\n* // For example to increase the saturation by 10%:\n* use photon::color_spaces::hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* hsv(&mut img, \\\"saturate\\\", 0.1);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n* @returns {void}\n*/\nexport function hsv(photon_image, mode, amt) {\n    const ptr1 = passStringToWasm(mode);\n    const len1 = WASM_VECTOR_LEN;\n    try {\n        return wasm.hsv(photon_image.ptr, ptr1, len1, amt);\n\n    } finally {\n        wasm.__wbindgen_free(ptr1, len1 * 1);\n\n    }\n\n}\n\n/**\n* Shift hue by a specified number of degrees in the HSL colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - The number of degrees to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```\n* // For example to hue rotate/shift the hue by 120 degrees in the HSL colour space:\n* use photon::color_spaces::hue_rotate_hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* hue_rotate_hsl(&mut img, 120);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n* @returns {void}\n*/\nexport function hue_rotate_hsl(img, degrees) {\n    return wasm.hue_rotate_hsl(img.ptr, degrees);\n}\n\n/**\n* Shift hue by a specified number of degrees in the HSV colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - The number of degrees to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```\n* // For example to hue rotate/shift the hue by 120 degrees in the HSV colour space:\n* use photon::color_spaces::hue_rotate_hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* hue_rotate_hsv(&mut img, 120);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n* @returns {void}\n*/\nexport function hue_rotate_hsv(img, degrees) {\n    return wasm.hue_rotate_hsv(img.ptr, degrees);\n}\n\n/**\n* Shift hue by a specified number of degrees in the LCh colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - The number of degrees to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```\n* // For example to hue rotate/shift the hue by 120 degrees in the HSL colour space:\n* use photon::color_spaces::hue_rotate_lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* hue_rotate_lch(&mut img, 120);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n* @returns {void}\n*/\nexport function hue_rotate_lch(img, degrees) {\n    return wasm.hue_rotate_lch(img.ptr, degrees);\n}\n\n/**\n* Increase the image\\'s saturation by converting each pixel\\'s colour to the HSL colour space\n* and increasing the colour\\'s saturation.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to increase saturation by 10% in the HSL colour space:\n* use photon::color_spaces::saturate_hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* saturate_hsl(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\nexport function saturate_hsl(img, level) {\n    return wasm.saturate_hsl(img.ptr, level);\n}\n\n/**\n* Increase the image\\'s saturation in the LCh colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to increase saturation by 40% in the Lch colour space:\n* use photon::color_spaces::saturate_lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* saturate_lch(&mut img, 0.4);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\nexport function saturate_lch(img, level) {\n    return wasm.saturate_lch(img.ptr, level);\n}\n\n/**\n* Increase the image\\'s saturation in the HSV colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level by which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to increase saturation by 30% in the HSV colour space:\n* use photon::color_spaces::saturate_hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* saturate_hsv(&mut img, 0.3);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\nexport function saturate_hsv(img, level) {\n    return wasm.saturate_hsv(img.ptr, level);\n}\n\n/**\n* Lighten an image by a specified amount in the LCh colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to lighten an image by 10% in the LCh colour space:\n* use photon::color_spaces::lighten_lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* lighten_lch(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\nexport function lighten_lch(img, level) {\n    return wasm.lighten_lch(img.ptr, level);\n}\n\n/**\n* Lighten an image by a specified amount in the HSL colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to lighten an image by 10% in the HSL colour space:\n* use photon::color_spaces::lighten_hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* lighten_hsl(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\nexport function lighten_hsl(img, level) {\n    return wasm.lighten_hsl(img.ptr, level);\n}\n\n/**\n* Lighten an image by a specified amount in the HSV colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to lighten an image by 10% in the HSV colour space:\n* use photon::color_spaces::lighten_hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* lighten_hsv(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\nexport function lighten_hsv(img, level) {\n    return wasm.lighten_hsv(img.ptr, level);\n}\n\n/**\n* Darken the image by a specified amount in the LCh colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to darken an image by 10% in the LCh colour space:\n* use photon::color_spaces::darken_lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* darken_lch(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\nexport function darken_lch(img, level) {\n    return wasm.darken_lch(img.ptr, level);\n}\n\n/**\n* Darken the image by a specified amount in the HSL colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to darken an image by 10% in the HSL colour space:\n* use photon::color_spaces::darken_hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* darken_hsl(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\nexport function darken_hsl(img, level) {\n    return wasm.darken_hsl(img.ptr, level);\n}\n\n/**\n* Darken the image\\'s colours by a specified amount in the HSV colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to darken an image by 10% in the HSV colour space:\n* use photon::color_spaces::darken_hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* darken_hsv(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\nexport function darken_hsv(img, level) {\n    return wasm.darken_hsv(img.ptr, level);\n}\n\n/**\n* Desaturate the image by a specified amount in the HSV colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to desaturate an image by 10% in the HSV colour space:\n* use photon::color_spaces::desaturate_hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/mountains.PNG\\\");\n*\n* desaturate_hsv(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\nexport function desaturate_hsv(img, level) {\n    return wasm.desaturate_hsv(img.ptr, level);\n}\n\n/**\n* Desaturate the image by a specified amount in the HSL colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to desaturate an image by 10% in the LCh colour space:\n* use photon::color_spaces::desaturate_hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* desaturate_hsl(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\nexport function desaturate_hsl(img, level) {\n    return wasm.desaturate_hsl(img.ptr, level);\n}\n\n/**\n* Desaturate the image by a specified amount in the LCh colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to desaturate an image by 10% in the LCh colour space:\n* use photon::color_spaces::desaturate_lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* desaturate_lch(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\nexport function desaturate_lch(img, level) {\n    return wasm.desaturate_lch(img.ptr, level);\n}\n\n/**\n* Noise reduction.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to sharpen an image:\n* use photon::conv::sharpen;\n* photon::channels::sharpen(img);\n* ```\n* Adds a constant to a select R, G, or B channel\\'s value.\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function noise_reduction(photon_image) {\n    return wasm.noise_reduction(photon_image.ptr);\n}\n\n/**\n* Sharpen an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to sharpen an image:\n* use photon::conv::sharpen;\n* photon::channels::sharpen(img);\n* ```\n* Adds a constant to a select R, G, or B channel\\'s value.\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function sharpen(photon_image) {\n    return wasm.sharpen(photon_image.ptr);\n}\n\n/**\n* Apply edge detection to an image, to create a dark version with its edges highlighted.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Red channel for all pixels by 10:\n* use photon::channels;\n* photon::conv::edge_detection(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function edge_detection(photon_image) {\n    return wasm.edge_detection(photon_image.ptr);\n}\n\n/**\n* Apply an identity kernel convolution to an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply an identity kernel convolution:\n* use photon::channels;\n* photon::conv::identity(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function identity(photon_image) {\n    return wasm.identity(photon_image.ptr);\n}\n\n/**\n* Apply a box blur effect.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply a box blur effect:\n* use photon::channels;\n* photon::conv::box_blur(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function box_blur(photon_image) {\n    return wasm.box_blur(photon_image.ptr);\n}\n\n/**\n* Apply a gaussian blur effect.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply a gaussian blur effect to an image:\n* use photon::channels;\n* photon::conv::gaussian_blur(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function gaussian_blur(photon_image) {\n    return wasm.gaussian_blur(photon_image.ptr);\n}\n\n/**\n* Detect horizontal lines in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to display the horizontal lines in an image:\n* use photon::channels;\n* photon::conv::detect_horizontal_lines(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function detect_horizontal_lines(photon_image) {\n    return wasm.detect_horizontal_lines(photon_image.ptr);\n}\n\n/**\n* Detect vertical lines in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to display the vertical lines in an image:\n* use photon::channels;\n* photon::conv::detect_vertical_lines(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function detect_vertical_lines(photon_image) {\n    return wasm.detect_vertical_lines(photon_image.ptr);\n}\n\n/**\n* Detect lines at a forty five degree angle in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to display the lines at a forty five degree angle in an image:\n* use photon::channels;\n* photon::conv::detect_fortyfivedeg_lines(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function detect_45_deg_lines(photon_image) {\n    return wasm.detect_45_deg_lines(photon_image.ptr);\n}\n\n/**\n* Detect lines at a 135 degree angle in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to display the lines at a 135 degree angle in an image:\n* use photon::channels;\n* photon::conv::detect_hundredthirtyfive_deg_lines(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function detect_135_deg_lines(photon_image) {\n    return wasm.detect_135_deg_lines(photon_image.ptr);\n}\n\n/**\n* Apply a standard laplace convolution.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply a laplace effect:\n* use photon::conv;\n* photon::conv::laplace(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function laplace(photon_image) {\n    return wasm.laplace(photon_image.ptr);\n}\n\n/**\n* Preset edge effect.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply this effect:\n* use photon::conv;\n* photon::conv::edge_one(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function edge_one(photon_image) {\n    return wasm.edge_one(photon_image.ptr);\n}\n\n/**\n* Apply an emboss effect to an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply an emboss effect:\n* use photon::conv;\n* photon::conv::emboss(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function emboss(photon_image) {\n    return wasm.emboss(photon_image.ptr);\n}\n\n/**\n* Apply a horizontal Sobel filter to an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply a horizontal Sobel filter:\n* use photon::conv;\n* photon::conv::sobel_horizontal(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function sobel_horizontal(photon_image) {\n    return wasm.sobel_horizontal(photon_image.ptr);\n}\n\n/**\n* Apply a horizontal Prewitt convolution to an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply a horizontal Prewitt convolution effect:\n* use photon::conv;\n* photon::conv::prewitt_horizontal(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function prewitt_horizontal(photon_image) {\n    return wasm.prewitt_horizontal(photon_image.ptr);\n}\n\n/**\n* Apply a vertical Sobel filter to an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply a vertical Sobel filter:\n* use photon::conv;\n* photon::conv::sobel_vertical(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function sobel_vertical(photon_image) {\n    return wasm.sobel_vertical(photon_image.ptr);\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n/**\n* [temp] Called by the JS entry point to ensure WASM is supported.\n* @returns {void}\n*/\nexport function run() {\n    return wasm.run();\n}\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* Get the ImageData from a 2D canvas context\n* @param {any} canvas\n* @param {any} ctx\n* @returns {any}\n*/\nexport function get_image_data(canvas, ctx) {\n    try {\n        return takeObject(wasm.get_image_data(addBorrowedObject(canvas), addBorrowedObject(ctx)));\n\n    } finally {\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n\n    }\n\n}\n\n/**\n* Place a PhotonImage onto a 2D canvas.\n* @param {any} canvas\n* @param {any} ctx\n* @param {PhotonImage} new_image\n* @returns {void}\n*/\nexport function putImageData(canvas, ctx, new_image) {\n    const ptr2 = new_image.ptr;\n    new_image.ptr = 0;\n    return wasm.putImageData(addHeapObject(canvas), addHeapObject(ctx), ptr2);\n}\n\n/**\n* Convert a HTML5 Canvas Element to a PhotonImage.\n*\n* This converts the ImageData found in the canvas context to a PhotonImage,\n* which can then have effects or filters applied to it.\n* @param {any} canvas\n* @param {any} ctx\n* @returns {PhotonImage}\n*/\nexport function open_image(canvas, ctx) {\n    return PhotonImage.__wrap(wasm.open_image(addHeapObject(canvas), addHeapObject(ctx)));\n}\n\nfunction getArrayU8FromWasm(ptr, len) {\n    return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n/**\n* Convert ImageData to a raw pixel vec of u8s.\n* @param {any} imgdata\n* @returns {Uint8Array}\n*/\nexport function to_raw_pixels(imgdata) {\n    const retptr = globalArgumentPtr();\n    wasm.to_raw_pixels(retptr, addHeapObject(imgdata));\n    const mem = getUint32Memory();\n    const rustptr = mem[retptr / 4];\n    const rustlen = mem[retptr / 4 + 1];\n\n    const realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n    wasm.__wbindgen_free(rustptr, rustlen * 1);\n    return realRet;\n\n}\n\n/**\n* @param {string} base64\n* @returns {PhotonImage}\n*/\nexport function base64_to_image(base64) {\n    const ptr0 = passStringToWasm(base64);\n    const len0 = WASM_VECTOR_LEN;\n    try {\n        return PhotonImage.__wrap(wasm.base64_to_image(ptr0, len0));\n\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n\n    }\n\n}\n\n/**\n* @param {string} base64\n* @returns {Uint8Array}\n*/\nexport function base64_to_vec(base64) {\n    const ptr0 = passStringToWasm(base64);\n    const len0 = WASM_VECTOR_LEN;\n    const retptr = globalArgumentPtr();\n    try {\n        wasm.base64_to_vec(retptr, ptr0, len0);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n\n    }\n\n}\n\nfunction passArray8ToWasm(arg) {\n    const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n    getUint8Memory().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Uint8Array} vec\n* @param {number} width\n* @param {number} height\n* @returns {PhotonImage}\n*/\nexport function photonimage_from_vec(vec, width, height) {\n    const ptr0 = passArray8ToWasm(vec);\n    const len0 = WASM_VECTOR_LEN;\n    return PhotonImage.__wrap(wasm.photonimage_from_vec(ptr0, len0, width, height));\n}\n\n/**\n* Convert a PhotonImage to JS-compatible ImageData.\n* @param {PhotonImage} photon_image\n* @returns {any}\n*/\nexport function to_image_data(photon_image) {\n    const ptr0 = photon_image.ptr;\n    photon_image.ptr = 0;\n    return takeObject(wasm.to_image_data(ptr0));\n}\n\n/**\n* @param {number} a\n* @param {number} b\n* @returns {number}\n*/\nexport function test(a, b) {\n    return wasm.test(a, b) >>> 0;\n}\n\n/**\n* Adds an offset to the image by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset is added to the pixels in the image.\n* # Example\n*\n* ```\n* // For example, to offset pixels by 30 pixels on the red channel:\n* use photon::effects;\n* photon::effects::offset(img, 0, 30);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} channel_index\n* @param {number} offset\n* @returns {void}\n*/\nexport function offset(photon_image, channel_index, offset) {\n    return wasm.offset(photon_image.ptr, channel_index, offset);\n}\n\n/**\n* Adds an offset to the red channel by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset you want to move the red channel by.\n* # Example\n*\n* ```\n* // For example, to add an offset to the red channel by 30 pixels.\n* use photon::effects;\n* photon::effects::offset_red(img, 30);\n* ```\n* @param {PhotonImage} img\n* @param {number} offset_amt\n* @returns {void}\n*/\nexport function offset_red(img, offset_amt) {\n    return wasm.offset_red(img.ptr, offset_amt);\n}\n\n/**\n* Adds an offset to the green channel by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset you want to move the green channel by.\n* # Example\n*\n* ```\n* // For example, to add an offset to the green channel by 30 pixels.\n* use photon::effects;\n* photon::effects::offset_green(img, 40);\n* ```\n* @param {PhotonImage} img\n* @param {number} offset_amt\n* @returns {void}\n*/\nexport function offset_green(img, offset_amt) {\n    return wasm.offset_green(img.ptr, offset_amt);\n}\n\n/**\n* Adds an offset to the blue channel by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset_amt` - The offset you want to move the blue channel by.\n* # Example\n* // For example, to add an offset to the green channel by 40 pixels.\n* use photon::effects;\n* photon::effects::offset_blue(img, 40);\n* ```\n* @param {PhotonImage} img\n* @param {number} offset_amt\n* @returns {void}\n*/\nexport function offset_blue(img, offset_amt) {\n    return wasm.offset_blue(img.ptr, offset_amt);\n}\n\n/**\n* Adds multiple offsets to the image by a certain number of pixels (on two channels).\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset is added to the pixels in the image.\n* # Example\n*\n* ```\n* // For example, to add a 30-pixel offset to both the red and blue channels:\n* use photon::effects;\n* photon::effects::multiple_offsets(img, 30, 0, 2);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} offset\n* @param {number} channel_index\n* @param {number} channel_index2\n* @returns {void}\n*/\nexport function multiple_offsets(photon_image, offset, channel_index, channel_index2) {\n    return wasm.multiple_offsets(photon_image.ptr, offset, channel_index, channel_index2);\n}\n\n/**\n* Pass the image through a duotone filter (comprising two colours, and their gradient from one colour to the other).\n* This is similar to greyscaling an image, but rather than having the gradient transition from black to white, it should\n* be between two other colours, red to green, for example.\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `color_a` - An RGB color.\n* * `color_b` - An RGB color.\n* # Example\n*\n* ```\n* // For example, to pass an image through a duotone filter:\n* use photon::effects;\n* photon::effects::duotone(img, colour_a, colour_b);\n* ```\n* @param {PhotonImage} photon_image\n* @param {Rgb} color_a\n* @param {Rgb} color_b\n* @returns {void}\n*/\nexport function duotone(photon_image, color_a, color_b) {\n    const ptr1 = color_a.ptr;\n    color_a.ptr = 0;\n    const ptr2 = color_b.ptr;\n    color_b.ptr = 0;\n    return wasm.duotone(photon_image.ptr, ptr1, ptr2);\n}\n\n/**\n* Reduces an image to the primary colours.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```\n* // For example, to add a primary colour effect to an image of type `DynamicImage`:\n* use photon::effects;\n* photon::effects::primary(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function primary(photon_image) {\n    return wasm.primary(photon_image.ptr);\n}\n\n/**\n* Colorizes the green channels of the image.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```\n* // For example, to colorize an image of type `PhotonImage`:\n* use photon::effects;\n* photon::effects::colorize(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function colorize(photon_image) {\n    return wasm.colorize(photon_image.ptr);\n}\n\n/**\n* Applies a solarizing effect to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```\n* // For example, to colorize an image of type `PhotonImage`:\n* use photon::effects;\n* photon::effects::solarize(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function solarize(photon_image) {\n    return wasm.solarize(photon_image.ptr);\n}\n\n/**\n* Increase the brightness of an image by a factor.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `brightness` - A u8 to add to the brightness.\n* # Example\n*\n* ```\n* photon::effects::inc_brightness(img, 10);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} brightness\n* @returns {void}\n*/\nexport function inc_brightness(photon_image, brightness) {\n    return wasm.inc_brightness(photon_image.ptr, brightness);\n}\n\n/**\n* Tint an image by adding an offset to averaged RGB channel values.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `r_offset` - The amount the  R channel should be incremented by.\n* * `g_offset` - The amount the G channel should be incremented by.\n* * `b_offset` - The amount the B channel should be incremented by.\n* # Example\n*\n* ```\n* // For example, to tint an image of type `PhotonImage`:\n* photon::tint(img, 10, 20, 15);\n* ```\n*\n* @param {PhotonImage} photon_image\n* @param {number} r_offset\n* @param {number} g_offset\n* @param {number} b_offset\n* @returns {void}\n*/\nexport function tint(photon_image, r_offset, g_offset, b_offset) {\n    return wasm.tint(photon_image.ptr, r_offset, g_offset, b_offset);\n}\n\n/**\n* Horizontal strips. Divide an image into a series of equal-height strips, for an artistic effect.\n* @param {PhotonImage} photon_image\n* @param {number} num_strips\n* @returns {void}\n*/\nexport function horizontal_strips(photon_image, num_strips) {\n    return wasm.horizontal_strips(photon_image.ptr, num_strips);\n}\n\n/**\n* Vertical strips. Divide an image into a series of equal-width strips, for an artistic effect.\n* @param {PhotonImage} photon_image\n* @param {number} num_strips\n* @returns {void}\n*/\nexport function vertical_strips(photon_image, num_strips) {\n    return wasm.vertical_strips(photon_image.ptr, num_strips);\n}\n\n/**\n* Alter a select channel by incrementing or decrementing its value by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel` - The channel you wish to alter, it should be either 0, 1 or 2,\n* representing R, G, or B respectively. (O=Red, 1=Green, 2=Blue)\n* * `amount` - The amount to increment/decrement the channel\\'s value by for that pixel.\n* A positive value will increment/decrement the channel\\'s value, a negative value will decrement the channel\\'s value.\n*\n* ## Example\n*\n* ```\n* // For example, to increase the Red channel for all pixels by 10:\n* use photon::channels;\n* let img = photon::open_image(\\\"img.jpg\\\");\n* photon::channels::alter_channel(&mut img, 0, 10);\n* // Write the contents of this image in JPG format.\n* photon::helpers::save_image(img, \\\"new_image.png\\\");\n* ```\n*\n* Adds a constant to a select R, G, or B channel\\'s value.\n*\n* ### Decrease a channel\\'s value\n* // For example, to decrease the Green channel for all pixels by 20:\n* ```\n* use photon::channels;\n* photon::channels::alter_channel(&mut img, 1, -20);\n* ```\n* **Note**: Note the use of a minus symbol when decreasing the channel.\n* @param {PhotonImage} photon_image\n* @param {number} channel\n* @param {number} amt\n* @returns {void}\n*/\nexport function alter_channel(photon_image, channel, amt) {\n    return wasm.alter_channel(photon_image.ptr, channel, amt);\n}\n\n/**\n* Increment or decrement every pixel\\'s Red channel by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage. See the PhotonImage struct for details.\n* * `amt` - The amount to increment or decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Red channel for all pixels by 10:\n* use photon::channels;\n* photon::channels::alter_red_channel(&mut img, 10);\n* ```\n* @param {PhotonImage} img\n* @param {number} amt\n* @returns {void}\n*/\nexport function alter_red_channel(img, amt) {\n    return wasm.alter_red_channel(img.ptr, amt);\n}\n\n/**\n* Increment or decrement every pixel\\'s Green channel by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `amt` - The amount to increment/decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Green channel for all pixels by 20:\n* use photon::channels;\n* photon::channels::alter_green_channel(&mut img, 10);\n* ```\n* @param {PhotonImage} img\n* @param {number} amt\n* @returns {void}\n*/\nexport function alter_green_channel(img, amt) {\n    return wasm.alter_green_channel(img.ptr, amt);\n}\n\n/**\n* Increment or decrement every pixel\\'s Blue channel by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `amt` - The amount to increment or decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Blue channel for all pixels by 10:\n* use photon::channels;\n* photon::channels::alter_blue_channel(&mut img, 10);\n* ```\n* @param {PhotonImage} img\n* @param {number} amt\n* @returns {void}\n*/\nexport function alter_blue_channel(img, amt) {\n    return wasm.alter_blue_channel(img.ptr, amt);\n}\n\n/**\n* Increment/decrement two channels\\' values simultaneously by adding an amt to each channel per pixel.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel1` - A usize from 0 to 2 that represents either the R, G or B channels.\n* * `amt1` - The amount to increment/decrement the channel\\'s value by for that pixel.\n* * `channel2` -A usize from 0 to 2 that represents either the R, G or B channels.\n* * `amt2` - The amount to increment/decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the values of the Red and Blue channels per pixel:\n* photon::channels::inc_two_channels(&mut img, 0, 10, 2, 20);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} channel1\n* @param {number} amt1\n* @param {number} channel2\n* @param {number} amt2\n* @returns {void}\n*/\nexport function alter_two_channels(photon_image, channel1, amt1, channel2, amt2) {\n    return wasm.alter_two_channels(photon_image.ptr, channel1, amt1, channel2, amt2);\n}\n\n/**\n* Increment all 3 channels\\' values by adding an amt to each channel per pixel.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `r_amt` - The amount to increment/decrement the Red channel by.\n* * `g_amt` - The amount to increment/decrement the Green channel by.\n* * `b_amt` - The amount to increment/decrement the Blue channel by.\n*\n* # Example\n*\n* ```\n* // For example, to increase the values of the Red channel by 10, the Green channel by 20,\n* // and the Blue channel by 50:\n* // photon::channels::alter_channels(&mut img, 10, 20, 50);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} r_amt\n* @param {number} g_amt\n* @param {number} b_amt\n* @returns {void}\n*/\nexport function alter_channels(photon_image, r_amt, g_amt, b_amt) {\n    return wasm.alter_channels(photon_image.ptr, r_amt, g_amt, b_amt);\n}\n\n/**\n* Set a certain channel to zero, thus removing the channel\\'s influence in the pixels\\' final rendered colour.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel` - The channel to be removed; must be a usize from 0 to 2, with 0 representing Red, 1 representing Green, and 2 representing Blue.\n* * `min_filter` - Value between 0 and 255. Only remove the channel if the current pixel\\'s channel value is less than this minimum filter. To completely\n* remove the channel, set this value to 255, to leave the channel as is, set to 0, and to set a channel to zero for a pixel whose red value is greater than 50,\n* then channel would be 0 and min_filter would be 50.\n*\n* # Example\n*\n* ```\n* // For example, to remove the Red channel with a min_filter of 100:\n* photon::channels::remove_channel(&mut img, 0, 100);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} channel\n* @param {number} min_filter\n* @returns {void}\n*/\nexport function remove_channel(photon_image, channel, min_filter) {\n    return wasm.remove_channel(photon_image.ptr, channel, min_filter);\n}\n\n/**\n* Remove the Red channel\\'s influence in an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `min_filter` - Only remove the channel if the current pixel\\'s channel value is less than this minimum filter.\n*\n* # Example\n*\n* ```\n* // For example, to remove the red channel for red channel pixel values less than 50:\n* photon::channels::remove_red_channel(&mut img, 50);\n* ```\n* @param {PhotonImage} img\n* @param {number} min_filter\n* @returns {void}\n*/\nexport function remove_red_channel(img, min_filter) {\n    return wasm.remove_red_channel(img.ptr, min_filter);\n}\n\n/**\n* Remove the Green channel\\'s influence in an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `min_filter` - Only remove the channel if the current pixel\\'s channel value is less than this minimum filter.\n*\n* # Example\n*\n* ```\n* // For example, to remove the green channel for green channel pixel values less than 50:\n* photon::channels::remove_green_channel(img, 50);\n* ```\n* @param {PhotonImage} img\n* @param {number} min_filter\n* @returns {void}\n*/\nexport function remove_green_channel(img, min_filter) {\n    return wasm.remove_green_channel(img.ptr, min_filter);\n}\n\n/**\n* Remove the Blue channel\\'s influence in an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `min_filter` - Only remove the channel if the current pixel\\'s channel value is less than this minimum filter.\n*\n* # Example\n*\n* ```\n* // For example, to remove the blue channel for blue channel pixel values less than 50:\n* photon::channels::remove_blue_channel(&mut img, 50);\n* ```\n* @param {PhotonImage} img\n* @param {number} min_filter\n* @returns {void}\n*/\nexport function remove_blue_channel(img, min_filter) {\n    return wasm.remove_blue_channel(img.ptr, min_filter);\n}\n\n/**\n* Swap two channels.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel1` - An index from 0 to 2, representing the Red, Green or Blue channels respectively. Red would be represented by 0, Green by 1, and Blue by 2.\n* * `channel2` - An index from 0 to 2, representing the Red, Green or Blue channels respectively. Same as above.\n*\n* # Example\n*\n* ```\n* // For example, to swap the values of the Red channel with the values of the Blue channel:\n* photon::channels::swap_channels(&mut img, 0, 2);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} channel1\n* @param {number} channel2\n* @returns {void}\n*/\nexport function swap_channels(photon_image, channel1, channel2) {\n    return wasm.swap_channels(photon_image.ptr, channel1, channel2);\n}\n\n/**\n* Selective hue rotation.\n*\n* Only rotate the hue of a pixel if its RGB values are within a specified range.\n* This function only rotates a pixel\\'s hue to another  if it is visually similar to the colour specified.\n* For example, if a user wishes all pixels that are blue to be changed to red, they can selectively specify  only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `degrees` - The amount of degrees to hue rotate by.\n*\n* # Example\n*\n* ```\n* // For example, to only rotate the pixels that are of RGB value RGB{20, 40, 60}:\n* let ref_color = Rgb{20, 40, 60};\n* photon::channels::selective_hue_rotate(&mut img, ref_color, 180);\n* ```\n* @param {PhotonImage} photon_image\n* @param {Rgb} ref_color\n* @param {number} degrees\n* @returns {void}\n*/\nexport function selective_hue_rotate(photon_image, ref_color, degrees) {\n    const ptr1 = ref_color.ptr;\n    ref_color.ptr = 0;\n    return wasm.selective_hue_rotate(photon_image.ptr, ptr1, degrees);\n}\n\n/**\n* Selectively lighten an image.\n*\n* Only lighten the hue of a pixel if its colour matches or is similar to the RGB colour specified.\n* For example, if a user wishes all pixels that are blue to be lightened, they can selectively specify  only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `amt` - The level from 0 to 1 to lighten the hue by. Increasing by 10% would have an `amt` of 0.1\n*\n* # Example\n*\n* ```\n* // For example, to only lighten the pixels that are of or similar to RGB value RGB{20, 40, 60}:\n* let ref_color = Rgb{20, 40, 60};\n* photon::channels::selective_lighten(&mut img, ref_color, 0.2);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} ref_color\n* @param {number} amt\n* @returns {void}\n*/\nexport function selective_lighten(img, ref_color, amt) {\n    const ptr1 = ref_color.ptr;\n    ref_color.ptr = 0;\n    return wasm.selective_lighten(img.ptr, ptr1, amt);\n}\n\n/**\n* Selectively desaturate pixel colours which are similar to the reference colour provided.\n*\n* Similarity between two colours is calculated via the CIE76 formula.\n* Only desaturates the hue of a pixel if its similarity to the reference colour is within the range in the algorithm.\n* For example, if a user wishes all pixels that are blue to be desaturated by 0.1, they can selectively specify  only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `amt` - The amount of desaturate the colour by.\n*\n* # Example\n*\n* ```\n* // For example, to only desaturate the pixels that are similar to the RGB value RGB{20, 40, 60}:\n* let ref_color = Rgb{20, 40, 60};\n* photon::channels::selective_desaturate(&mut img, ref_color, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} ref_color\n* @param {number} amt\n* @returns {void}\n*/\nexport function selective_desaturate(img, ref_color, amt) {\n    const ptr1 = ref_color.ptr;\n    ref_color.ptr = 0;\n    return wasm.selective_desaturate(img.ptr, ptr1, amt);\n}\n\n/**\n* Selectively saturate pixel colours which are similar to the reference colour provided.\n*\n* Similarity between two colours is calculated via the CIE76 formula.\n* Only saturates the hue of a pixel if its similarity to the reference colour is within the range in the algorithm.\n* For example, if a user wishes all pixels that are blue to have an increase in saturation by 10%, they can selectively specify only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `amt` - The amount of saturate the colour by.\n*\n* # Example\n*\n* ```\n* // For example, to only increase the saturation of pixels that are similar to the RGB value RGB{20, 40, 60}:\n* let ref_color = Rgb{20, 40, 60};\n* photon::channels::selective_saturate(&mut img, ref_color, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} ref_color\n* @param {number} amt\n* @returns {void}\n*/\nexport function selective_saturate(img, ref_color, amt) {\n    const ptr1 = ref_color.ptr;\n    ref_color.ptr = 0;\n    return wasm.selective_saturate(img.ptr, ptr1, amt);\n}\n\n/**\n* Selectively changes a pixel to greyscale if it is *not* visually similar or close to the colour specified.\n* Only changes the colour of a pixel if its RGB values are within a specified range.\n*\n* (Similarity between two colours is calculated via the CIE76 formula.)\n* For example, if a user wishes all pixels that are *NOT* blue to be displayed in greyscale, they can selectively specify only the blue pixels to be\n* kept in the photo.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n*\n* # Example\n*\n* ```\n* // For example, to greyscale all pixels that are *not* visually similar to the RGB colour RGB{20, 40, 60}:\n* let ref_color = Rgb{20, 40, 60};\n* photon::channels::selective_greyscale(&mut img, ref_color);\n* ```\n* @param {PhotonImage} photon_image\n* @param {Rgb} ref_color\n* @returns {void}\n*/\nexport function selective_greyscale(photon_image, ref_color) {\n    const ptr0 = photon_image.ptr;\n    photon_image.ptr = 0;\n    const ptr1 = ref_color.ptr;\n    ref_color.ptr = 0;\n    return wasm.selective_greyscale(ptr0, ptr1);\n}\n\n/**\n* Apply a monochrome effect of a certain colour.\n*\n* It does so by averaging the R, G, and B values of a pixel, and then adding a\n* separate value to that averaged value for each channel to produce a tint.\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `r_offset` - The value to add to the Red channel per pixel.\n* * `g_offset` - The value to add to the Green channel per pixel.\n* * `b_offset` - The value to add to the Blue channel per pixel.\n*\n* # Example\n*\n* ```\n* // For example, to apply a monochrome effect to an image:\n* use photon::monochrome;\n* monochrome::monochroma(&mut img, 40, 50, 100);\n* ```\n*\n* @param {PhotonImage} photon_image\n* @param {number} r_offset\n* @param {number} g_offset\n* @param {number} b_offset\n* @returns {void}\n*/\nexport function monochrome(photon_image, r_offset, g_offset, b_offset) {\n    return wasm.monochrome(photon_image.ptr, r_offset, g_offset, b_offset);\n}\n\n/**\n* Convert an image to sepia.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to tint an image of type `PhotonImage`:\n* use photon::monochrome;\n* monochrome::sepia(&mut img);\n* ```\n*\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function sepia(photon_image) {\n    return wasm.sepia(photon_image.ptr);\n}\n\n/**\n* Convert an image to grayscale using the conventional averaging algorithm.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to convert an image of type `PhotonImage` to greyscale:\n* use photon::monochrome;\n* monochrome::grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function grayscale(photon_image) {\n    return wasm.grayscale(photon_image.ptr);\n}\n\n/**\n* Convert an image to grayscale with a human corrected factor, to account for human vision.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to convert an image of type `PhotonImage` to greyscale with a human corrected factor:\n* use photon::monochrome;\n* monochrome::grayscale_human_corrected(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function grayscale_human_corrected(photon_image) {\n    return wasm.grayscale_human_corrected(photon_image.ptr);\n}\n\n/**\n* Desaturate an image by getting the min/max of each pixel\\'s RGB values.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to desaturate an image:\n* use photon::monochrome;\n* monochrome::desaturate(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function desaturate(photon_image) {\n    return wasm.desaturate(photon_image.ptr);\n}\n\n/**\n* Uses a min. decomposition algorithm to convert an image to greyscale.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to decompose an image with min decomposition:\n* monochrome::decompose_min(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function decompose_min(photon_image) {\n    return wasm.decompose_min(photon_image.ptr);\n}\n\n/**\n* Uses a max. decomposition algorithm to convert an image to greyscale.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to decompose an image with max decomposition:\n* monochrome::decompose_max(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function decompose_max(photon_image) {\n    return wasm.decompose_max(photon_image.ptr);\n}\n\n/**\n* Employ only a limited number of gray shades in an image.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `num_shades` - The number of grayscale shades to be displayed in the image.\n* # Example\n*\n* ```\n* // For example, to limit an image to four shades of gray only:\n* monochrome::grayscale_shades(&mut img, 4);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} num_shades\n* @returns {void}\n*/\nexport function grayscale_shades(photon_image, num_shades) {\n    return wasm.grayscale_shades(photon_image.ptr, num_shades);\n}\n\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to the Red channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* monochrome::r_grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function r_grayscale(photon_image) {\n    return wasm.r_grayscale(photon_image.ptr);\n}\n\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to the Green channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* monochrome::g_grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function g_grayscale(photon_image) {\n    return wasm.g_grayscale(photon_image.ptr);\n}\n\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to the Blue channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* monochrome::b_grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function b_grayscale(photon_image) {\n    return wasm.b_grayscale(photon_image.ptr);\n}\n\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to a chosen channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `channel` - A usize representing the channel from 0 to 2. O represents the Red channel, 1 the Green channel, and 2 the Blue channel.\n* # Example\n* To grayscale using only values from the Red channel:\n* ```\n* monochrome::single_channel_grayscale(&mut img, 0);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} channel\n* @returns {void}\n*/\nexport function single_channel_grayscale(photon_image, channel) {\n    return wasm.single_channel_grayscale(photon_image.ptr, channel);\n}\n\n/**\n* Threshold an image using a standard thresholding algorithm.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `threshold` - The amount the image should be thresholded by from 0 to 255.\n* # Example\n*\n* ```\n* // For example, to threshold an image of type `PhotonImage`:\n* use photon::monochrome;\n* monochrome::threshold(&mut img, 30);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} threshold\n* @returns {void}\n*/\nexport function threshold(photon_image, threshold) {\n    return wasm.threshold(photon_image.ptr, threshold);\n}\n\n/**\n* Solarization on the Blue channel.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::neue(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function neue(photon_image) {\n    return wasm.neue(photon_image.ptr);\n}\n\n/**\n* Solarization on the Red and Green channels.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::lix(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function lix(photon_image) {\n    return wasm.lix(photon_image.ptr);\n}\n\n/**\n* Solarization on the Red and Blue channels.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::ryo(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\nexport function ryo(photon_image) {\n    return wasm.ryo(photon_image.ptr);\n}\n\n/**\n* Apply a filter to an image. Over 20 filters are available.\n* The filters are as follows:\n* * **oceanic**: Add an aquamarine-tinted hue to an image.\n* * **islands**: Aquamarine tint.\n* * **marine**: Add a green/blue mixed hue to an image.\n* * **seagreen**: Dark green hue, with tones of blue.\n* * **flagblue**: Royal blue tint\n* * **liquid**: Blue-inspired tint.\n* * **diamante**: Custom filter with a blue/turquoise tint.\n* * **radio**: Fallout-style radio effect.\n* * **twenties**: Slight-blue tinted historical effect.\n* * **rosetint**: Rose-tinted filter.\n* * **mauve**: Purple-infused filter.\n* * **bluechrome**: Blue monochrome effect.\n* * **vintage**: Vintage filter with a red tint.\n* * **perfume**: Increase the blue channel, with moderate increases in the Red and Green channels.\n* * **serenity**: Custom filter with an increase in the Blue channel\\'s values.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `blend_mode` - The blending mode to use. See above for complete list of blend modes available.\n* # Example\n*\n* ```\n* // For example, to add a filter called \\\"vintage\\\" to an image:\n* use photon::filters;\n* photon::filters::filter(&mut img, \\\"vintage\\\");\n* ```\n* @param {PhotonImage} img\n* @param {string} filter_name\n* @returns {void}\n*/\nexport function filter(img, filter_name) {\n    const ptr1 = passStringToWasm(filter_name);\n    const len1 = WASM_VECTOR_LEN;\n    try {\n        return wasm.filter(img.ptr, ptr1, len1);\n\n    } finally {\n        wasm.__wbindgen_free(ptr1, len1 * 1);\n\n    }\n\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nexport function __wbg_error_4bb6c2a97407129a(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n\n    varg0 = varg0.slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n\n    console.error(varg0);\n}\n\nexport function __wbg_new_59cb74e423758ede() {\n    return addHeapObject(new Error());\n}\n\nexport function __wbg_stack_558ba5917b466edd(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).stack);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nfunction handleError(exnptr, e) {\n    const view = getUint32Memory();\n    view[exnptr / 4] = 1;\n    view[exnptr / 4 + 1] = addHeapObject(e);\n}\n\nexport function __widl_f_get_image_data_CanvasRenderingContext2D(arg0, arg1, arg2, arg3, arg4, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).getImageData(arg1, arg2, arg3, arg4));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_put_image_data_CanvasRenderingContext2D(arg0, arg1, arg2, arg3, exnptr) {\n    try {\n        getObject(arg0).putImageData(getObject(arg1), arg2, arg3);\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_create_element_Document(arg0, arg1, arg2, exnptr) {\n    let varg1 = getStringFromWasm(arg1, arg2);\n    try {\n        return addHeapObject(getObject(arg0).createElement(varg1));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nexport function __widl_f_body_Document(arg0) {\n\n    const val = getObject(arg0).body;\n    return isLikeNone(val) ? 0 : addHeapObject(val);\n\n}\n\nexport function __widl_f_width_HTMLCanvasElement(arg0) {\n    return getObject(arg0).width;\n}\n\nexport function __widl_f_height_HTMLCanvasElement(arg0) {\n    return getObject(arg0).height;\n}\n\nlet cachegetUint8ClampedMemory = null;\nfunction getUint8ClampedMemory() {\n    if (cachegetUint8ClampedMemory === null || cachegetUint8ClampedMemory.buffer !== wasm.memory.buffer) {\n        cachegetUint8ClampedMemory = new Uint8ClampedArray(wasm.memory.buffer);\n    }\n    return cachegetUint8ClampedMemory;\n}\n\nfunction getClampedArrayU8FromWasm(ptr, len) {\n    return getUint8ClampedMemory().subarray(ptr / 1, ptr / 1 + len);\n}\n\nexport function __widl_f_new_with_u8_clamped_array_and_sh_ImageData(arg0, arg1, arg2, arg3, exnptr) {\n    let varg0 = getClampedArrayU8FromWasm(arg0, arg1);\n    try {\n        return addHeapObject(new ImageData(varg0, arg2 >>> 0, arg3 >>> 0));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_data_ImageData(ret, arg0) {\n\n    const retptr = passArray8ToWasm(getObject(arg0).data);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n}\n\nexport function __widl_f_append_child_Node(arg0, arg1, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).appendChild(getObject(arg1)));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __widl_f_set_text_content_Node(arg0, arg1, arg2) {\n    let varg1 = arg1 == 0 ? undefined : getStringFromWasm(arg1, arg2);\n    getObject(arg0).textContent = varg1;\n}\n\nexport function __widl_instanceof_Window(idx) { return getObject(idx) instanceof Window ? 1 : 0; }\n\nexport function __widl_f_document_Window(arg0) {\n\n    const val = getObject(arg0).document;\n    return isLikeNone(val) ? 0 : addHeapObject(val);\n\n}\n\nexport function __wbg_newnoargs_a172f39151049128(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    return addHeapObject(new Function(varg0));\n}\n\nexport function __wbg_call_8a9c8b0a32a202ff(arg0, arg1, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).call(getObject(arg1)));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nexport function __wbindgen_debug_string(i, len_ptr) {\n    const debug_str =\n    val => {\n        // primitive types\n        const type = typeof val;\n        if (type == 'number' || type == 'boolean' || val == null) {\n            return  `${val}`;\n        }\n        if (type == 'string') {\n            return `\"${val}\"`;\n        }\n        if (type == 'symbol') {\n            const description = val.description;\n            if (description == null) {\n                return 'Symbol';\n            } else {\n                return `Symbol(${description})`;\n            }\n        }\n        if (type == 'function') {\n            const name = val.name;\n            if (typeof name == 'string' && name.length > 0) {\n                return `Function(${name})`;\n            } else {\n                return 'Function';\n            }\n        }\n        // objects\n        if (Array.isArray(val)) {\n            const length = val.length;\n            let debug = '[';\n            if (length > 0) {\n                debug += debug_str(val[0]);\n            }\n            for(let i = 1; i < length; i++) {\n                debug += ', ' + debug_str(val[i]);\n            }\n            debug += ']';\n            return debug;\n        }\n        // Test for built-in\n        const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n        let className;\n        if (builtInMatches.length > 1) {\n            className = builtInMatches[1];\n        } else {\n            // Failed to match the standard '[object ClassName]'\n            return toString.call(val);\n        }\n        if (className == 'Object') {\n            // we're a user defined class or Object\n            // JSON.stringify avoids problems with cycles, and is generally much\n            // easier than looping through ownProperties of `val`.\n            try {\n                return 'Object(' + JSON.stringify(val) + ')';\n            } catch (_) {\n                return 'Object';\n            }\n        }\n        // errors\n        if (val instanceof Error) {\n        return `${val.name}: ${val.message}\n        ${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n;\nconst toString = Object.prototype.toString;\nconst val = getObject(i);\nconst debug = debug_str(val);\nconst ptr = passStringToWasm(debug);\ngetUint32Memory()[len_ptr / 4] = WASM_VECTOR_LEN;\nreturn ptr;\n}\n\nexport function __wbindgen_rethrow(idx) { throw takeObject(idx); }\n\nexport function __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\nfunction freePhotonImage(ptr) {\n\n    wasm.__wbg_photonimage_free(ptr);\n}\n/**\n* Provides the image\\'s height, width, and contains the image\\'s raw pixels.\n* For use when communicating between JS and WASM, and also natively.\n*/\nexport class PhotonImage {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PhotonImage.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freePhotonImage(ptr);\n    }\n\n    /**\n    * @param {any} img_data\n    * @param {number} width\n    * @param {number} height\n    * @returns {PhotonImage}\n    */\n    new_from_imgdata(img_data, width, height) {\n        return PhotonImage.__wrap(wasm.photonimage_new_from_imgdata(this.ptr, addHeapObject(img_data), width, height));\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @returns {PhotonImage}\n    */\n    new(width, height) {\n        return PhotonImage.__wrap(wasm.photonimage_new(this.ptr, width, height));\n    }\n}\n\nfunction freeRgb(ptr) {\n\n    wasm.__wbg_rgb_free(ptr);\n}\n/**\n* RGB color type.\n*/\nexport class Rgb {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Rgb.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeRgb(ptr);\n    }\n\n    /**\n    * @returns {number}\n    */\n    get r() {\n        return wasm.__wbg_get_rgb_r(this.ptr);\n    }\n    set r(arg0) {\n        return wasm.__wbg_set_rgb_r(this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get g() {\n        return wasm.__wbg_get_rgb_g(this.ptr);\n    }\n    set g(arg0) {\n        return wasm.__wbg_set_rgb_g(this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get b() {\n        return wasm.__wbg_get_rgb_b(this.ptr);\n    }\n    set b(arg0) {\n        return wasm.__wbg_set_rgb_b(this.ptr, arg0);\n    }\n    /**\n    * @param {number} r\n    * @param {number} g\n    * @param {number} b\n    * @returns {Rgb}\n    */\n    static new(r, g, b) {\n        return Rgb.__wrap(wasm.rgb_new(r, g, b));\n    }\n}\n\nexport function __wbindgen_object_clone_ref(idx) {\n    return addHeapObject(getObject(idx));\n}\n\nexport function __wbindgen_object_drop_ref(i) { dropObject(i); }\n\n"],"sourceRoot":""}